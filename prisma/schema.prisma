generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "foreignKeys"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    created_at    DateTime   @default(now()) @db.Timestamptz(6)
    updated_at    DateTime   @default(now()) @db.Timestamptz(6)
    is_admin      Boolean?   @default(false) @db.Boolean
    MINT          Mint[]
    Profile       Profile?
    Referral      Referral[]
}

model Mint {
    id          Int     @id @default(autoincrement())
    profile_id  Int     @unique(map: "unique_profile_id")
    approved    Boolean
    reviewed_by String
    User        User    @relation(fields: [reviewed_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_admin_id")
    Profile     Profile @relation(fields: [profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_profile_id")
}

model Profile {
    id            Int      @id @default(autoincrement())
    handle        String   @unique(map: "handle")
    title         String
    summary       String
    job_type      String
    pref_location String
    salary        String
    years_of_exp  String
    link          String
    address       String
    skills        String[]
    education     Json     @db.Json
    experience    Json     @db.Json
    minted        Boolean
    user_id       String   @unique(map: "user_unique")
    User          User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")
    Mint          Mint?
}

model Referral {
    id      Int    @id @default(autoincrement())
    email   String @unique(map: "email_unique") @db.VarChar(255)
    user_id String
    User    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")
}
