generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "./generated/type-graphql"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  created_at    DateTime   @default(now()) @db.Timestamptz(6)
  updated_at    DateTime   @default(now()) @db.Timestamptz(6)
  is_admin      Boolean?   @default(false)
  accounts      Account[]
  mints         Mint[]
  profile       Profile?
  referrals     Referral[]
  sessions      Session[]
}

model Mint {
  id          Int     @id @default(autoincrement())
  profile_id  Int     @unique(map: "unique_profile_id")
  approved    Boolean
  reviewed_by String
  user        User    @relation(fields: [reviewed_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_admin_id")
  profile     Profile @relation(fields: [profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_profile_id")
}

model Profile {
  id            Int      @id @default(autoincrement())
  handle        String   @unique(map: "handle")
  title         String
  summary       String
  job_type      String
  pref_location String
  salary        String
  years_of_exp  String
  link          Json     @db.Json
  address       String
  skills        String[]
  education     Json[]   @db.Json
  experience    Json[]   @db.Json
  minted        Boolean
  user_id       String   @unique(map: "user_unique")
  ipfs_hash     String
  mint          Mint?
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")
}

model Referral {
  id      Int    @id @default(autoincrement())
  email   String @unique(map: "email_unique") @db.VarChar(255)
  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")
}

model Credit {
  id         Int    @id @default(autoincrement())
  orefid     String
  profile_id String
}
